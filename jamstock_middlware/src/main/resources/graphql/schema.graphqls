scalar Date
#
type StockMarket {
    id: ID!
    marketType: Market
}

type Market {
    id: ID!
    name:String!
    stocks: [Stock]
}

type Currency {
    id: ID!
    name: String
}

type Stock {
    symbol: String
    currency: Currency
    name: String
    closePrice: Float
    lastTradePrice: Float
    priceChange: Float
}
type Article {
    datePublished: Date
    relatedStock:Stock
    document:String
}

type User {
    id: ID!
    username: String
    email: String!
    password: String!
    twoFactorEnabled: Boolean
    profile:UserProfile
}
type UserProfile {
    displayName:String
    profilePicture:String
}
type AuthPayload{
    token:String
    user:User
}

##inputs
#input createStockMarket{
#    id: ID!
#    marketType: Market
#}
#
#type Query {
#    stockMarket(id: ID!) :StockMarket
#}
#
#type Mutation {
#    createStockMarket(input:createStockMarket):StockMarket
#}
################add mutation###############
#
###########Create a new StockMarket:
#
##
##mutation {
##    createStockMarket(input: { marketType: ID! }) {
##        id
##    }
##}
############Update an existing StockMarket:
##
##mutation {
##    updateStockMarket(id: ID!, input: { marketType: ID! }) {
##        id
##    }
##}
############Delete a StockMarket by ID:
##
##mutation {
##    deleteStockMarket(id: ID!) {
##        id
##    }
##}
############Create a new Market:
##
##mutation {
##    createMarket(input: {}) {
##        id
##    }
##}
############Update an existing Market:
##
##mutation {
##    updateMarket(id: ID!, input: {}) {
##        id
##    }
##}
############Delete a Market by ID:
##
##mutation {
##    deleteMarket(id: ID!) {
##        id
##    }
##}
############Create a new Currency:
##
##mutation {
##    createCurrency(input: { name: String }) {
##        id
##    }
##}
############Update an existing Currency:
##
##mutation {
##    updateCurrency(id: ID!, input: { name: String }) {
##        id
##    }
##}
############Delete a Currency by ID:
##
##mutation {
##    deleteCurrency(id: ID!) {
##        id
##    }
##}
############Create a new Stock:
##
##mutation {
##    createStock(input: { symbol: String, currency: ID!, name: String, closePrice: Float, lastTradePrice: Float, priceChange: Float }) {
##        symbol
##    }
##}
############Update an existing Stock:
##
##mutation {
##    updateStock(symbol: String!, input: { currency: ID, name: String, closePrice: Float, lastTradePrice: Float, priceChange: Float }) {
##        symbol
##    }
##}
############Delete a Stock by Symbol:
##
##mutation {
##    deleteStock(symbol: String!) {
##        symbol
##    }
##}
############Create a new Article:
##
##mutation {
##    createArticle(input: { datePublished: Date, relatedStock: String, document: String }) {
##        datePublished
##    }
##}
############Update an existing Article:
##
##mutation {
##    updateArticle(datePublished: Date!, input: { relatedStock: String, document: String }) {
##        datePublished
##    }
##}
############Delete an Article by Date Published:
##
##mutation {
##    deleteArticle(datePublished: Date!) {
##        datePublished
##    }
##}
############Create a new User:
##
##
##mutation {
##createUser(input: { username: String!, email: String!, password: String!, twoFactorEnabled: Boolean, profile: { displayName: String, profilePicture: String } }) {
##id
##}
##}
############Update an existing User:
##
##mutation {
##updateUser(id: ID!, input: { username: String, email: String, password: String, twoFactorEnabled: Boolean, profile: { displayName: String, profilePicture: String } }) {
##id
##}
##}
############Delete a User by ID:
##
##mutation {
##deleteUser(id: ID!) {
##id
##}
##}
#################add query   ###############
##
############Get StockMarket by ID:
##
##
#type Query {
#stockMarket(id: ID!) {
#id
#marketType {
#id
#}
#}
#}
###########List all StockMarkets:
#
#
#query {
#stockMarkets {
#id
#marketType {
#id
#}
#}
#}
###########Get Market by ID:
#
#
#query {
#market(id: ID!) {
#id
#stocks {
#symbol
#}
#}
#}
###########List all Markets:
#
#
#query {
#markets {
#id
#}
#}
###########Get Currency by ID:
#
#
#query {
#currency(id: ID!) {
#id
#name
#}
#}
###########List all Currencies:
#
#
#query {
#currencies {
#id
#name
#}
#}
###########Get Stock by Symbol:
#
#
#query {
#stock(symbol: String!) {
#symbol
#name
#closePrice
#lastTradePrice
#priceChange
#}
#}
###########List all Stocks in a Market:
#
#
#query {
#market(id: ID!) {
#id
#stocks {
#symbol
#name
#}
#}
#}
###########Get Article by Date Published:
#
#query {
#article(datePublished: Date!) {
#datePublished
#relatedStock {
#symbol
#}
#document
#}
#}
###########List all Articles:
#
#query {
#articles {
#datePublished
#relatedStock {
#symbol
#}
#document
#}
#}
###########Get User by ID:
#
#query {
#user(id: ID!) {
#id
#username
#email
#twoFactorEnabled
#profile {
#displayName
#profilePicture
#}
#}
#}

#query {
#stock(symbol: String!) {
#symbol
#name
#closePrice
#lastTradePrice
#priceChange
#}
#}

type Query {
#    bookById(id: ID): Book
#    stockById(id: ID):Stock
#    stocks:[Stock]
    currencies:[Currency]
    markets:[Market]
    stocks:[Stock]
    stockMarkets:[StockMarket]
    articles:[Article]
}

type Book {
    id: ID
    name: String
    pageCount: Int
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}